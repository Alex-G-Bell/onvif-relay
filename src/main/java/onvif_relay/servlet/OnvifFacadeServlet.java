/**
 * @what A servlet for exposing Thrift services over HTTP.
 * 
 * TServlet expects to be invoked via"
 * 
 * 2) Via HTTP POST with the request body being url-safe base 64 JSON package thrift
 *    request, with result returned as JSON response
 *
 * This code is based heavily on
 * {@link com.facebook.thrift.server.TSimpleServer}.
 * {@link https://gist.github.com/pieceable/430784/8c38b0cb47e9667d2168e75e61540d03f0c11e9d}.
 * 
 * @author John Hartley - for Ericsson Mana Lab Discovery POC
 * 
 */

package onvif_relay.servlet;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.HashSet;
import java.util.Set;

import org.apache.http.client.utils.URIBuilder;
import org.eclipse.jetty.proxy.ProxyServlet;

import fence.util.ConfigurationData;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.xml.soap.MessageFactory;
import jakarta.xml.soap.SOAPConstants;
import jakarta.xml.soap.SOAPMessage;

public class OnvifFacadeServlet extends ProxyServlet {
  ConfigurationData confData; 
  private static final long serialVersionUID = 1L;
  private /* GENERATED by XSLT */ String[] DeviceOperations = {
		    "GetServices", 
		    "GetServiceCapabilities", 
		    "GetDeviceInformation", 
		    "SetSystemDateAndTime", 
		    "GetSystemDateAndTime", 
		    "SetSystemFactoryDefault", 
		    "UpgradeSystemFirmware", 
		    "SystemReboot", 
		    "RestoreSystem", 
		    "GetSystemBackup", 
		    "GetSystemLog", 
		    "GetSystemSupportInformation", 
		    "GetScopes", 
		    "SetScopes", 
		    "AddScopes", 
		    "RemoveScopes", 
		    "GetDiscoveryMode", 
		    "SetDiscoveryMode", 
		    "GetRemoteDiscoveryMode", 
		    "SetRemoteDiscoveryMode", 
		    "GetDPAddresses", 
		    "SetDPAddresses", 
		    "GetEndpointReference", 
		    "GetRemoteUser", 
		    "SetRemoteUser", 
		    "GetUsers", 
		    "CreateUsers", 
		    "DeleteUsers", 
		    "SetUser", 
		    "GetWsdlUrl", 
		    "GetPasswordComplexityOptions", 
		    "GetPasswordComplexityConfiguration", 
		    "SetPasswordComplexityConfiguration", 
		    "GetPasswordHistoryConfiguration", 
		    "SetPasswordHistoryConfiguration", 
		    "GetAuthFailureWarningOptions", 
		    "GetAuthFailureWarningConfiguration", 
		    "SetAuthFailureWarningConfiguration", 
		    "GetCapabilities", 
		    "GetHostname", 
		    "SetHostname", 
		    "SetHostnameFromDHCP", 
		    "GetDNS", 
		    "SetDNS", 
		    "GetNTP", 
		    "SetNTP", 
		    "GetDynamicDNS", 
		    "SetDynamicDNS", 
		    "GetNetworkInterfaces", 
		    "SetNetworkInterfaces", 
		    "GetNetworkProtocols", 
		    "SetNetworkProtocols", 
		    "GetNetworkDefaultGateway", 
		    "SetNetworkDefaultGateway", 
		    "GetZeroConfiguration", 
		    "SetZeroConfiguration", 
		    "GetIPAddressFilter", 
		    "SetIPAddressFilter", 
		    "AddIPAddressFilter", 
		    "RemoveIPAddressFilter", 
		    "GetAccessPolicy", 
		    "SetAccessPolicy", 
		    "GetRelayOutputs", 
		    "SetRelayOutputSettings", 
		    "SetRelayOutputState", 
		    "SendAuxiliaryCommand", 
		    "GetDot11Capabilities", 
		    "GetDot11Status", 
		    "ScanAvailableDot11Networks", 
		    "GetSystemUris", 
		    "StartFirmwareUpgrade", 
		    "StartSystemRestore", 
		    "GetStorageConfigurations", 
		    "CreateStorageConfiguration", 
		    "GetStorageConfiguration", 
		    "SetStorageConfiguration", 
		    "DeleteStorageConfiguration", 
		    "GetGeoLocation", 
		    "SetGeoLocation", 
		    "DeleteGeoLocation", 
		    "SetHashingAlgorithm", 
		    "CreateCertificate", 
		    "GetCertificates", 
		    "GetCertificatesStatus", 
		    "SetCertificatesStatus", 
		    "DeleteCertificates", 
		    "GetPkcs10Request", 
		    "LoadCertificates", 
		    "GetClientCertificateMode", 
		    "SetClientCertificateMode", 
		    "GetCACertificates", 
		    "LoadCertificateWithPrivateKey", 
		    "GetCertificateInformation", 
		    "LoadCACertificates", 
		    "CreateDot1XConfiguration", 
		    "SetDot1XConfiguration", 
		    "GetDot1XConfiguration", 
		    "GetDot1XConfigurations", 
		    "DeleteDot1XConfiguration" };
  private /* GENERATED by XSLT */ String[] MediaOperations = {
		    "GetServiceCapabilities", 
		    "GetVideoSources", 
		    "GetAudioSources", 
		    "GetAudioOutputs", 
		    "CreateProfile", 
		    "GetProfile", 
		    "GetProfiles", 
		    "AddVideoEncoderConfiguration", 
		    "RemoveVideoEncoderConfiguration", 
		    "AddVideoSourceConfiguration", 
		    "RemoveVideoSourceConfiguration", 
		    "AddAudioEncoderConfiguration", 
		    "RemoveAudioEncoderConfiguration", 
		    "AddAudioSourceConfiguration", 
		    "RemoveAudioSourceConfiguration", 
		    "AddPTZConfiguration", 
		    "RemovePTZConfiguration", 
		    "AddVideoAnalyticsConfiguration", 
		    "RemoveVideoAnalyticsConfiguration", 
		    "AddMetadataConfiguration", 
		    "RemoveMetadataConfiguration", 
		    "AddAudioOutputConfiguration", 
		    "RemoveAudioOutputConfiguration", 
		    "AddAudioDecoderConfiguration", 
		    "RemoveAudioDecoderConfiguration", 
		    "DeleteProfile", 
		    "GetVideoSourceConfigurations", 
		    "GetVideoEncoderConfigurations", 
		    "GetAudioSourceConfigurations", 
		    "GetAudioEncoderConfigurations", 
		    "GetVideoAnalyticsConfigurations", 
		    "GetMetadataConfigurations", 
		    "GetAudioOutputConfigurations", 
		    "GetAudioDecoderConfigurations", 
		    "GetVideoSourceConfiguration", 
		    "GetVideoEncoderConfiguration", 
		    "GetAudioSourceConfiguration", 
		    "GetAudioEncoderConfiguration", 
		    "GetVideoAnalyticsConfiguration", 
		    "GetMetadataConfiguration", 
		    "GetAudioOutputConfiguration", 
		    "GetAudioDecoderConfiguration", 
		    "GetCompatibleVideoEncoderConfigurations", 
		    "GetCompatibleVideoSourceConfigurations", 
		    "GetCompatibleAudioEncoderConfigurations", 
		    "GetCompatibleAudioSourceConfigurations", 
		    "GetCompatibleVideoAnalyticsConfigurations", 
		    "GetCompatibleMetadataConfigurations", 
		    "GetCompatibleAudioOutputConfigurations", 
		    "GetCompatibleAudioDecoderConfigurations", 
		    "SetVideoSourceConfiguration", 
		    "SetVideoEncoderConfiguration", 
		    "SetAudioSourceConfiguration", 
		    "SetAudioEncoderConfiguration", 
		    "SetVideoAnalyticsConfiguration", 
		    "SetMetadataConfiguration", 
		    "SetAudioOutputConfiguration", 
		    "SetAudioDecoderConfiguration", 
		    "GetVideoSourceConfigurationOptions", 
		    "GetVideoEncoderConfigurationOptions", 
		    "GetAudioSourceConfigurationOptions", 
		    "GetAudioEncoderConfigurationOptions", 
		    "GetMetadataConfigurationOptions", 
		    "GetAudioOutputConfigurationOptions", 
		    "GetAudioDecoderConfigurationOptions", 
		    "GetGuaranteedNumberOfVideoEncoderInstances", 
		    "GetStreamUri", 
		    "StartMulticastStreaming", 
		    "StopMulticastStreaming", 
		    "SetSynchronizationPoint", 
		    "GetSnapshotUri", 
		    "GetVideoSourceModes", 
		    "SetVideoSourceMode", 
		    "GetOSDs", 
		    "GetOSD", 
		    "GetOSDOptions", 
		    "SetOSD", 
		    "CreateOSD", 
		    "DeleteOSD"};
  private Set<String> DeviceOperation = new HashSet<>();
  private Set<String> MediaOperation = new HashSet<>();
  String dport;
  String mport;
  String devrequest;
  String medrequest;
  
  public OnvifFacadeServlet(ConfigurationData cf) {
	super();
	confData = cf;
    dport = confData.getItem("onvif-device", "device-port");
	mport = confData.getItem("onvif-device", "media-port");
	devrequest = confData.getItem("onvif-device", "device-service");
	medrequest = confData.getItem("onvif-device", "media-service");  
    // this.customHeaders = new ArrayList<Map.Entry<String, String>>();
    for (String s: DeviceOperations) DeviceOperation.add(s);
    for (String s: MediaOperations) MediaOperation.add(s);
  }
   
  @Override
  public void init() throws ServletException {
	super.init();
    System.out.println("DBG>> DeviceDiscoveryServlet:init");  
  }
  
  @Override
  protected String rewriteTarget(HttpServletRequest request) {
	String reqURL = null;

	try {

	  InputStream is = request.getInputStream();
	  SOAPMessage soapReq = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL).createMessage(null, is);

	  String soapMethod = soapReq.getSOAPBody().getChildNodes().item(1).getLocalName();

	  
	  if (DeviceOperation.contains(soapMethod)  || (! MediaOperation.contains(soapMethod))) {
		reqURL = "http://127.0.0.1:" + dport + devrequest;
		// RequestDispatcher dispatcher = request.getRequestDispatcher(devrequest);
		// dispatcher.forward(request, response);
	  } else {
		reqURL = "http://127/0.0.1:" + mport + medrequest;
		// RequestDispatcher dispatcher = request.getRequestDispatcher(medrequest);
		// dispatcher.forward(request, response);
	  }
		  
	} catch (Exception ex) {
	  ex.printStackTrace();
	}
	return reqURL;
  }
  
  @Override
  protected void doOptions(HttpServletRequest req, HttpServletResponse resp)
            throws IOException, ServletException {  
    resp.setHeader("Allow", "POST, OPTIONS");
  }

}
